<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

<!-- 1.开启包扫描 说明让spring自己扫描所有的项目 -->
	<context:component-scan base-package="com.jt"/>
	<!-- 2.导入外部配置文件 jdbc.properties -->
	<!-- 1)通过标签导入property文件,location中引入文件路径
		 缺点：通过标签引入property时之恩那个引入文件名相同的配置文件。jdbc*.properties 引入多个配置文件
		 作用：通过spring扫描配置文件。将jdbc中的数据导入spring中，方便用户从容器中获取数据。
		 目的就是让配置变得松耦合。
		 lg:pro1.property pro2.property 
		 采用jdbc*.properties进行引入
	 -->
	<!-- <context:property-placeholder location="classpath:/property/jdbc.properties"/> -->
	<!-- 作用：可以实现将任意的配置文件导入spring容器中 -->
	<bean id="propertyPlaceholder" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/property/jdbc.properties</value>
				<!-- 添加redis的配置文件 -->
				<value>classpath:/property/redis.properties</value>
				<value>classpath:/property/message.properties</value>
			</list>
		</property>
	</bean>
	<!-- 3.配置数据源 通常使用dataSource -->
		<!-- 配置连接池 -->
	<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
		<!-- 数据库驱动 -->
		<property name="driverClass" value="${jdbc.driver}" />
		<!-- 相应驱动的jdbcUrl -->
		<property name="jdbcUrl" value="${jdbc.url}" />
		<!-- 数据库的用户名 -->
		<property name="username" value="${jdbc.username}" />
		<!-- 数据库的密码 -->
		<property name="password" value="${jdbc.password}" />
		<!-- 检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!-- 连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0 -->
		<property name="idleMaxAge" value="30" />
		<!-- 每个分区最大的连接数 -->
		<property name="maxConnectionsPerPartition" value="150" />
		<!-- 每个分区最小的连接数 -->
		<property name="minConnectionsPerPartition" value="5" />
	</bean>
	<!-- 4.配置声明式事务处理
		作用：通过自定义的事务策略，描述某些方法需要事务，某些方法不需要事务设置为只读状态
		步骤：
			1)定义事务管理器
			2)自定义事务策略&配置事务通知
			3)生成事务切面
	 -->
	 <!-- 4.1定义事务管理器 -->
	 <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	 	<!-- 添加数据源 ref引用数据源中的id -->
	 	<property name="dataSource" ref="dataSource"/>
	 </bean>
	 <!-- 4.2定义事务通知及策略
	 	id:唯一标识通知
	 	transaction-manager 默认的名称为transactionManager 事务管理器的id
	 	如果事务管理器的名称(id)为transactionManager则该配置可以省略不写
	 	事务策略：
	 		新增：insert,save,add
	 		修改：update
	 		删除：delete	需要进行事务控制
	 		查询：find,select,query	不需要事务
	 	自定义事务策略
	 	<tx:method name="save*" propagation="REQUIRED"/>
	 		name：需要控制的方法，一般以*号结尾表示通配
	 		propagetion：事务传播属性
	 			REQUIRED 必须添加事务
				SUPPORTS 表示事务支持的 一般都这么配
				- MANDATORY
				- REQUIRES_NEW
				- NOT_SUPPORTED
				- NEVER
				- NESTED
	  -->
	 <tx:advice id="txAdvice" transaction-manager="transactionManager">
	 	<tx:attributes>
	 		<tx:method name="save*" propagation="REQUIRED"/>
	 		<tx:method name="update*" propagation="REQUIRED"/>
	 		<tx:method name="delete*" propagation="REQUIRED"/>
	 		
	 		<tx:method name="find*" propagation="SUPPORTS"/>
	 		<tx:method name="select*" propagation="SUPPORTS"/>
	 		<tx:method name="query*" propagation="SUPPORTS"/>
	 		<!-- 其他方法 使用只读 不允许更新数据库 -->
	 		<tx:method name="*" read-only="true"/>
	 	</tx:attributes>
	 </tx:advice>
	 <!-- 4.3配置事务切面 通知+切入点=切面
	 	execution(返回值类型 包名.类名.方法名(参数列表))
	 	注意：中间空格不能省略
	 	lg: execution(* com.jt.manage.service..*.*(..))
	 		拦截返回值任意的,包名为com.jt.manage.service包下的全部类的任意方法任意参数列表
	  -->
	 <aop:config>
	 	<aop:pointcut expression="execution(* com.jt.sso.service..*.*(..))" id="pc"/>
<!-- 通知+切入点=切面 -->
	 	<aop:advisor advice-ref="txAdvice" pointcut-ref="pc"/>
	 </aop:config>
	
</beans>